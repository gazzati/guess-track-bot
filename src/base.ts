import "./aliases"

import Api from "@api/index"
import Fuse from "fuse.js"
import TelegramBot, { InlineKeyboardButton } from "node-telegram-bot-api"

import config from "@root/config"
import Storage from "@root/storage"

import { entities } from "@database/data-source"
import Logger from "@helpers/logger"

import type { Track, TrackListItem } from "@interfaces/api"
import { InlineKeyboard, User } from "@interfaces/telegram"

abstract class Base {
  protected entities = entities

  protected bot: TelegramBot
  protected api: Api
  protected storage: Storage
  protected logger: Logger

  constructor() {
    this.bot = new TelegramBot(config.telegramToken, { polling: true })
    this.api = new Api()
    this.storage = new Storage()
    this.logger = new Logger()
  }

  protected async getRandomTrackByArtist(chatId: number, artistQuery: string): Promise<Track | null> {
    const artistTracks = await this.api.getArtistTracks(artistQuery)
    if (!artistTracks?.track_list?.length) return null

    const filteredTracks = await this.filteredTracks(chatId, artistTracks.track_list)
    if (!filteredTracks?.length) return null

    const randomIndex = this.getRandomIndex(filteredTracks.length)
    const randomTrack = filteredTracks[randomIndex].track
    return randomTrack || null
  }

  private async filteredTracks(chatId: number, trackList: Array<TrackListItem>): Promise<Array<TrackListItem>> {
    const cashedTracks = await this.storage.getTracks(chatId)
    if (!cashedTracks.length) return trackList

    return trackList.filter(item => !cashedTracks.includes(String(item.track.track_id)))
  }

  protected getLyricFragment(lyric: string): string | null {
    const preparedLyric = lyric.split("\n").slice(0, -3)
    if (!preparedLyric?.length) return null

    const randomIndex = this.getRandomIndex(preparedLyric.length - 4)

    const slice = this.getLyricResult(preparedLyric, randomIndex)
    if (!slice) return this.getLyricResult(preparedLyric)

    return slice
  }

  private getLyricResult(lyricArray: Array<string>, from = 0): string {
    let result: Array<string> = []

    for (let i = from; i < lyricArray.length; i += 1) {
      if (result.length > 3) break

      if (lyricArray[i].length < 5) {
        result = []
        continue
      }

      result.push(lyricArray[i])
    }

    return result.join("\n")
  }

  protected async compareAnswer(chatId: number, answer: string): Promise<string | null> {
    const chat = await this.storage.get(chatId)
    if (!chat) return null

    if (!chat.trackName || !chat.artistName) return null

    const fuse = new Fuse([chat.trackName], { includeScore: true })
    const result = fuse.search(answer)
    const score = result.at(0)?.score

    this.updateStats(chatId, score)

    if (score === undefined || score > 0.6) return this.getFailedMessage(chat.trackName, chat.artistName)
    if (score < 0.4) return this.getRightMessage(chat.trackName, chat.artistName, chat.albumName)
    return `–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –∏–º–µ–ª –≤–≤–∏–¥—É *${chat.trackName}* \n–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç üòè`
  }

  private async updateStats(chatId: number, score?: number) {
    const stat = await this.entities.Stat.findOne({ where: { chat_id: chatId } })
    if (stat) {
      stat.answers += 1
      if (score !== undefined && score <= 0.7) stat.success_answers += 1

      this.entities.Stat.save(stat)
    }
  }

  private getFailedMessage(track: string, artist: string): string {
    const random = Math.floor(Math.random() * 3)

    switch (random) {
      case 2:
        return `–≠—Ö, —Ç—ã —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å *${artist}* üòø \n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - *${track}*`
      case 1:
        return `–ú–¥–∞... \n–ù–µ –æ–∂–∏–¥–∞–ª –æ—Ç —Ç–µ–±—è —Ç–∞–∫–æ–≥–æ üò° \n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *${artist} - ${track}*`
      default:
        return `–ö–∞–∂–µ—Ç—Å—è —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–ª—É—à–∞—Ç—å *${artist}* ‚òπÔ∏è \n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - *${track}*`
    }
  }

  private getRightMessage(track: string, artist: string, album: string | null): string {
    if (!album || album.includes(track)) return `–ê —Ç—ã –º–æ–ª–æ–¥–µ—Ü üí•, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–µ–∫ *${artist}* - *${track}*`

    return `–í–µ—Ä–Ω–æ üî•, —ç—Ç–æ —Ç—Ä–µ–∫ *${track}* —Å –∞–ª—å–±–æ–º–∞ *${album}*`
  }

  protected send(chatId: number, message: string, keyboards?: Array<InlineKeyboardButton>): void {
    this.bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      ...(keyboards?.length && {
        reply_markup: {
          inline_keyboard: [keyboards]
        }
      })
    })
  }

  protected get startKeyboardButtons(): Array<InlineKeyboardButton> {
    return [
      {
        text: "–ù–∞—á–∞—Ç—å",
        callback_data: InlineKeyboard.ChooseArtist
      }
    ]
  }

  protected get answerKeyboardButtons(): Array<InlineKeyboardButton> {
    return [
      {
        text: "–ù–æ–≤—ã–π —Ç—Ä–µ–∫",
        callback_data: InlineKeyboard.NewTrack
      },
      {
        text: "–°–º–µ–Ω–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞",
        callback_data: InlineKeyboard.ChooseArtist
      }
    ]
  }

  protected error(chatId: number, user?: User, message?: string): void {
    this.logger.error(user, message)
    this.bot.sendMessage(chatId, message || "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ü´∂üèª")
  }

  private getRandomIndex(length: number): number {
    return Math.floor(Math.random() * length)
  }
}

export default Base
